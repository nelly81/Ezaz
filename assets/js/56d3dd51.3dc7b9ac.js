"use strict";(self.webpackChunkbrave_wallet_docs=self.webpackChunkbrave_wallet_docs||[]).push([[638],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(d,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},i="Events",c={unversionedId:"ethereum/provider-api/events",id:"ethereum/provider-api/events",title:"Events",description:"connect",source:"@site/docs/ethereum/provider-api/events.md",sourceDirName:"ethereum/provider-api",slug:"/ethereum/provider-api/events",permalink:"/ethereum/provider-api/events",draft:!1,editUrl:"https://github.com/brave/brave-wallet-docs/edit/main/docs/ethereum/provider-api/events.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Methods",permalink:"/ethereum/provider-api/methods"},next:{title:"Properties",permalink:"/ethereum/provider-api/properties"}},d={},l=[{value:"<code>connect</code>",id:"connect",level:2},{value:"<code>disconnect</code>",id:"disconnect",level:2},{value:"<code>chainChanged</code>",id:"chainchanged",level:2},{value:"<code>accountsChanged</code>",id:"accountschanged",level:2},{value:"<code>message</code>",id:"message",level:2},{value:"<code>close</code> (deprecated)",id:"close-deprecated",level:2},{value:"<code>networkChanged</code> (deprecated)",id:"networkchanged-deprecated",level:2}],s={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"events"},"Events"),(0,a.kt)("h2",{id:"connect"},(0,a.kt)("inlineCode",{parentName:"h2"},"connect")),(0,a.kt)("p",null,"The Provider emits connect when it:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"first connects to a chain after being initialized."),(0,a.kt)("li",{parentName:"ul"},"first connects to a chain, after the disconnect event was emitted.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface ProviderConnectInfo {\n  readonly chainId: string;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Provider.on('connect', listener: (connectInfo: ProviderConnectInfo) => void): Provider;\n")),(0,a.kt)("h2",{id:"disconnect"},(0,a.kt)("inlineCode",{parentName:"h2"},"disconnect")),(0,a.kt)("p",null,"The Provider emits disconnect when it becomes disconnected from all chains."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Provider.on('disconnect', listener: (error: ProviderRpcError) => void): Provider;\n")),(0,a.kt)("h2",{id:"chainchanged"},(0,a.kt)("inlineCode",{parentName:"h2"},"chainChanged")),(0,a.kt)("p",null,"The Provider emits chainChanged when connecting to a new chain."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Provider.on('chainChanged', listener: (chainId: string) => void): Provider;\n")),(0,a.kt)("h2",{id:"accountschanged"},(0,a.kt)("inlineCode",{parentName:"h2"},"accountsChanged")),(0,a.kt)("p",null,"The Provider emits accountsChanged if the accounts returned from the Provider (eth_accounts) change."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Provider.on('accountsChanged', listener: (accounts: string[]) => void): Provider;\n")),(0,a.kt)("h2",{id:"message"},(0,a.kt)("inlineCode",{parentName:"h2"},"message")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," event is fired for ",(0,a.kt)("inlineCode",{parentName:"p"},"eth_subscribe")," subscription results."),(0,a.kt)("p",null,"Other types of events are possible in the future, so be sure to check the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," property."),(0,a.kt)("p",null,"The event will be emitted with an object argument of the following form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface ProviderMessage {\n  readonly type: string;\n  readonly data: unknown;\n}\n")),(0,a.kt)("h2",{id:"close-deprecated"},(0,a.kt)("inlineCode",{parentName:"h2"},"close")," (deprecated)"),(0,a.kt)("p",null,"Not yet implemented, but Brave may implement it.\nThis event ",(0,a.kt)("inlineCode",{parentName:"p"},"close")," is superseded by ",(0,a.kt)("inlineCode",{parentName:"p"},"disconnect"),"."),(0,a.kt)("admonition",{title:"Deprecated API",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This API is deprecated and not available in Brave Wallet.")),(0,a.kt)("h2",{id:"networkchanged-deprecated"},(0,a.kt)("inlineCode",{parentName:"h2"},"networkChanged")," (deprecated)"),(0,a.kt)("p",null,"Not yet implemented, but Brave may implement it for webcompat reasons."),(0,a.kt)("p",null,"The event ",(0,a.kt)("inlineCode",{parentName:"p"},"networkChanged")," is superseded by ",(0,a.kt)("inlineCode",{parentName:"p"},"chainChanged"),"."),(0,a.kt)("admonition",{title:"Deprecated API",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This API is deprecated and not available in Brave Wallet.")))}p.isMDXComponent=!0}}]);